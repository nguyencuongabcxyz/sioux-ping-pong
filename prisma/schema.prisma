// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user model for authentication
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// Tournament progression tracking
model TournamentStage {
  id            String          @id @default(cuid())
  currentStage  TournamentPhase @default(GROUP_STAGE)
  groupStageCompleted Boolean   @default(false)
  knockoutGenerated   Boolean   @default(false)
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("tournament_stage")
}

// Tournament table (3 tables in total)
model TournamentTable {
  id          String @id @default(cuid())
  name        String @unique // "Table 1", "Table 2", "Table 3"
  description String?
  teams       Team[]
  matches     Match[]

  @@map("tournament_tables")
}

// Team model (4 teams per table)
model Team {
  id               String          @id @default(cuid())
  name             String
  member1Image     String?         // Path to first member's image
  member2Image     String?         // Path to second member's image
  tournamentTable  TournamentTable @relation(fields: [tournamentTableId], references: [id])
  tournamentTableId String
  
  // Stats for ranking
  matchesPlayed    Int @default(0)
  wins             Int @default(0)
  losses           Int @default(0)
  points           Int @default(0) // Total points scored
  pointsAgainst    Int @default(0) // Total points conceded
  
  // Matches where this team is player 1 or player 2
  homeMatches      Match[] @relation("HomeTeam")
  awayMatches      Match[] @relation("AwayTeam")
  
  // Prediction game relation
  predictableTeam  PredictableTeam?
  
  // Match prediction relations
  matchPredictions MatchPrediction[] @relation("MatchPredictionWinner")
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([name, tournamentTableId])
  @@map("teams")
}

// Match model
model Match {
  id                String          @id @default(cuid())
  tournamentTable   TournamentTable? @relation(fields: [tournamentTableId], references: [id])
  tournamentTableId String?
  
  homeTeam          Team            @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId        String
  awayTeam          Team            @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId        String
  
  scheduledAt       DateTime
  status            MatchStatus     @default(SCHEDULED)
  format            MatchFormat     @default(BO3) // Best of 3 or Best of 5
  matchType         MatchType       @default(GROUP_STAGE)
  
  // Knockout specific fields
  round             KnockoutRound?
  roundOrder        Int?            // Order within the round (1st QF, 2nd QF, etc.)
  
  // Match result (games won)
  homeGamesWon      Int             @default(0)
  awayGamesWon      Int             @default(0)
  
  // Prediction settings
  predictionsOpen   Boolean         @default(false) // Admin can open/close predictions for this match
  
  // Legacy fields for backward compatibility
  homeScore         Int?
  awayScore         Int?
  completedAt       DateTime?
  
  // Individual games
  games             Game[]
  
  // Advancing team for knockout matches
  winnerAdvancesToMatch Match?       @relation("AdvancingMatch", fields: [winnerAdvancesToMatchId], references: [id])
  winnerAdvancesToMatchId String?
  advancingFromMatches  Match[]      @relation("AdvancingMatch")
  
  // Match predictions
  predictions       MatchPrediction[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("matches")
}

// Individual game within a match
model Game {
  id              String   @id @default(cuid())
  match           Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId         String
  
  gameNumber      Int      // 1, 2, 3, 4, 5
  homeScore       Int      @default(0)
  awayScore       Int      @default(0)
  status          GameStatus @default(SCHEDULED)
  completedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([matchId, gameNumber])
  @@map("games")
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchFormat {
  BO3  // Best of 3
  BO5  // Best of 5
}

enum MatchType {
  GROUP_STAGE
  KNOCKOUT
}

enum KnockoutRound {
  QUARTER_FINAL
  SEMI_FINAL
  FINAL
}

enum TournamentPhase {
  GROUP_STAGE
  KNOCKOUT_STAGE
  COMPLETED
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

// Final match prediction game models
model PredictableTeam {
  id         String   @id @default(cuid())
  teamId     String   @unique
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  isActive   Boolean  @default(true) // Admin can enable/disable teams for prediction
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Predictions made for this team as champion
  predictions FinalMatchPrediction[] @relation("PredictedChampion")

  @@map("predictable_teams")
}

model FinalMatchPrediction {
  id              String         @id @default(cuid())
  playerName      String
  companyEmail    String
  championTeamId  String
  championTeam    PredictableTeam @relation("PredictedChampion", fields: [championTeamId], references: [id], onDelete: Cascade)
  matchResult     String         // e.g., "3-1", "3-0", "3-2"
  losingTeamScore Int            // Final game score of the losing team (0-11 points)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([companyEmail])
  @@map("final_match_predictions")
}

// Scheduled match prediction game models
model MatchPrediction {
  id              String   @id @default(cuid())
  playerName      String
  companyEmail    String
  matchId         String
  match           Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  winningTeamId   String
  winningTeam     Team     @relation("MatchPredictionWinner", fields: [winningTeamId], references: [id], onDelete: Cascade)
  matchResult     String   // e.g., "3-1", "3-0", "3-2"
  losingTeamScore Int      // Final game score of the losing team (0-11 points)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([companyEmail, matchId]) // One prediction per email per match
  @@map("match_predictions")
}
