#!/usr/bin/env node

/**
 * Ping Pong Tournament - Setup Script
 * Automates the initial setup process for the tournament application
 */

const { execSync } = require('child_process');
const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🏓 Welcome to Ping Pong Tournament Setup!');
console.log('This script will help you set up the application.\n');

function runCommand(command, description) {
  console.log(`📦 ${description}...`);
  try {
    execSync(command, { stdio: 'inherit' });
    console.log(`✅ ${description} completed\n`);
  } catch (error) {
    console.error(`❌ ${description} failed:`, error.message);
    process.exit(1);
  }
}

function createEnvFile(databaseUrl, adminEmail, adminPassword) {
  const envContent = `# Environment variables for Ping Pong Tournament
# Generated by setup script

# Database
DATABASE_URL="${databaseUrl}"

# NextAuth
NEXTAUTH_SECRET="${generateRandomSecret()}"
NEXTAUTH_URL="http://localhost:3000"

# Admin credentials
ADMIN_EMAIL="${adminEmail}"
ADMIN_PASSWORD="${adminPassword}"
`;

  fs.writeFileSync('.env', envContent);
  console.log('✅ .env file created\n');
}

function generateRandomSecret() {
  return require('crypto').randomBytes(32).toString('hex');
}

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function main() {
  try {
    // Check if .env already exists
    if (fs.existsSync('.env')) {
      const overwrite = await promptUser('⚠️  .env file already exists. Overwrite? (y/N): ');
      if (overwrite.toLowerCase() !== 'y') {
        console.log('Setup cancelled. Using existing .env file.\n');
      } else {
        await setupEnvironment();
      }
    } else {
      await setupEnvironment();
    }

    // Install dependencies
    console.log('📦 Installing dependencies...');
    runCommand('npm install', 'Dependencies installation');

    // Generate Prisma client
    runCommand('npx prisma generate', 'Prisma client generation');

    // Ask about database setup
    const setupDb = await promptUser('🗄️  Set up database and seed data? (Y/n): ');
    if (setupDb.toLowerCase() !== 'n') {
      // Database migration
      runCommand('npx prisma migrate dev --name init', 'Database migration');
      
      // Seed database
      runCommand('npx prisma db seed', 'Database seeding');
    }

    console.log('🎉 Setup completed successfully!');
    console.log('\n📋 Next steps:');
    console.log('   1. Start the development server: npm run dev');
    console.log('   2. Open http://localhost:3000 in your browser');
    console.log('   3. Access admin panel at http://localhost:3000/admin/login');
    console.log('   4. Use your admin credentials to log in\n');
    
    console.log('🏓 Happy tournament managing!');

  } catch (error) {
    console.error('❌ Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

async function setupEnvironment() {
  console.log('🔧 Setting up environment variables...\n');

  const databaseUrl = await promptUser(
    '🗄️  Enter your PostgreSQL database URL\n' +
    '   (e.g., postgresql://username:password@localhost:5432/ping_pong_tournament): '
  );

  const adminEmail = await promptUser(
    '👤 Enter admin email (default: admin@company.com): '
  ) || 'admin@company.com';

  const adminPassword = await promptUser(
    '🔐 Enter admin password (default: admin123): '
  ) || 'admin123';

  createEnvFile(databaseUrl, adminEmail, adminPassword);
}

// Check if Node.js version is supported
const nodeVersion = parseInt(process.version.slice(1).split('.')[0]);
if (nodeVersion < 18) {
  console.error('❌ Node.js 18+ is required. Current version:', process.version);
  process.exit(1);
}

// Run the setup
main();